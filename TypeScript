This is the typescript tutorial

Static Checking in the typescript :- Static checking is primarily about reviewing and analyzing your code before it is compiled or run. Its main purpose is to catch potential errors and issues early in the development process, well before the code executes.
TypeScript parses your code into a structured form (AST).
t analyzes that structure without executing it to verify types and syntax.
Static checking in TypeScript:
Does not execute your code.
Analyzes the code by walking through its structure (AST)  Abstract Syntax Tree .
Checks for type correctness, syntax issues, and potential errors.
If no errors are found, the code is then transpiled (converted) into JavaScript.
The resulting JavaScript code can then be executed normally.

like the code const 
shape={width:10, h:12}
const num=10;
console.log(shape.width* shape.ht)  ****output in js is NaN ********************
but in ts it will gives you the error.



The only difference between the js and ts is we have to declare the datatypes in typescript like  ########    let var_Name:type=value ############  

*type script can remmeber the data type if you did not provide the data type of any variable *

any :-using any keyword we can remove the typechecking of the typescript and can assign any value to this variable 
unknown:- this works same as any but it allow the type checking of the variables and it does not allow to assign the variables
access the properties or methods without the type checking 

*******************************************************************************************************************************
when we do not define the data type in the typescript it takes it as any data type by default and it removes the type checking
let name;  ### this is any data type;
function name(num){  return num*num} here the types script uses the num as any data type

we can also define the return type of functions in the typescript 


#######################🤨🤚🤚🤚🤚🤚🤚🤚🤚🤚🤚🤚🤚🤚🤚🤚      
function functionName(params): ReturnType {
  // function body
}
🤚🤚🤚🤚🤚🤚🤚🤚🤚🤚🤚🤚🤚🤚

const solve = () number =>{ return 190}
👉👉 however it is not necessary to declare the return type of the functions 

👉👉
type script can have multiple functions return type and if we do not define the return type then it depend on functions
function getValue(condition: boolean): string | number {
  if (condition) {
    return "Hello";
  } else {
    return 42;
  }
}

😇😇😇  Never return type :-
there is a special return type in the typescript which is never return type which means the function will never finishes the
execution of the code 
it provides to check the working of the functions 
👉👉
never means the function does not complete normally by returning a value.
It either:
Throws an error and stops execution immediately, or
Runs forever without reaching the end.
Both cases mean no usable return value exists, so the return type is never.


👉👉 this is the format of function in which we can provide object as a parameter 
 function printName (person: { first: string; last: string }) {
console. log(* ${person. first} ${person.last}’) } 
printName({ first: "Thomas", last: "Jenkins" });

👉👉

we can provide extra property to the ibject function by creating a new object but we can not pass the extra property
to the functions as a parameter while calling the functions 

function printName(person: { first: string; last: string }): void {
  console.log(`${person.first} ${person.last}`);
}


printName({ first: "Mick", last: "Jagger", age: 473 }  ❌❌❌❌❌❌❌❌❌❌❌❌


const singer = {
  first: "Mick",
  last: "Jagger",
  age: 473,
  isAlive: true
};
// Passing the object to the function – works because it has required properties
printName(singer);✅✅✅✅✅✅

👉👉 we can also combine the two objects inside a single object 
type Circle = {
  radius: number;
};
type Colorful = {
  color: string;
};
type ColorfulCircle = Circle & Colorful;
const happyFace: ColorfulCircle = {
  radius: 4,
  color: "yellow"
};


Arrays in typescript:- 
declaring an array inside the typescript  is to 
const arr: string[]= [];


















