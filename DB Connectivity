migrations
steps

1 create the domain 
2 create the dbContext and inherit the DbContext
3 subscribe in the main project using the service collection 
4 nuget package, postgresql, and entity core framework are the necessary packages 


In simpler terms, DI helps manage dependencies (objects) outside of the class by passing them in via constructor, method, or property injection.

ðŸ”¶ 1. Reflection

ðŸ”¶ 2. Middleware
ðŸ”¶ 3. Filters
AddScoped Add Transient and AddSingleton 


Value types vs. reference types
Classes, structs, records
Properties, methods, events
Delegates, events, Func/Action
Generics
Async/await & Task Parallel Library
Exception handling
LINQ (Language Integrated Query)
Routing and Endpoints
Controllers and Action Methods
Model Binding & Validation
Filters (Action, Exception, Authorization)
Middleware pipeline
Content Negotiation (JSON, XML)
Versioning APIs
Swagger / OpenAPI



DbContext, DbSet
Code-First approach
Migrations
LINQ queries and raw SQL
Relationships (One-to-One, One-to-Many, Many-to-Many)
Lazy, Eager, and Explicit Loading
Tracking vs. No Tracking
Transactions
Performance optimization



ASP.NET Identity
JWT-based Authentication
Role-based & Policy-based Authorization
OAuth2 / OpenID Connect (with IdentityServer or Auth0)
Secure password storage (hashing, salting)
Protecting APIs and securing endpoints



Background services (IHostedService)
SignalR (real-time communication)
Caching (In-Memory, Redis)
Rate Limiting
Localization & Globalization
File Upload/Download
Logging (Serilog, NLog)




